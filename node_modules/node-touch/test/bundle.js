;(function(e,t,n){function i(n,s){if(!t[n]){if(!e[n]){var o=typeof require=="function"&&require;if(!s&&o)return o(n,!0);if(r)return r(n,!0);throw new Error("Cannot find module '"+n+"'")}var u=t[n]={exports:{}};e[n][0](function(t){var r=e[n][1][t];return i(r?r:t)},u,u.exports)}return t[n].exports}var r=typeof require=="function"&&require;for(var s=0;s<n.length;s++)i(n[s]);return i})({1:[function(require,module,exports){
require('../index.js')();

window.onload = function () {

for (var i = 0; i < 30;i++) {
	var button = document.createElement('button');
	button.classList.add('touch');
	var div = document.createElement('div');
	div.innerHTML = i + ' item';
	button.appendChild(div);
	document.body.appendChild(button);

	button.addEventListener('tap', function (event) {
		this.classList.toggle('tapped');
		console.log('tap')
	}, false);
}

};
},{"../index.js":2}],2:[function(require,module,exports){
require('node-inserted')('touch');

var TAP_BOUND_X = 15;
var TAP_BOUND_Y = 15;

function isInBounds (touch, element) {
	var left   = element.offsetLeft
		, top    = element.offsetTop
		, right  = left + element.offsetWidth
		, bottom = top + element.offsetHeight
	;
	return (touch.pageX > left && touch.pageX < right && touch.pageY > top && touch.pageY < bottom);
}

if (!window.isTouchDevice) window.isTouchDevice = !!('ontouchstart' in window);

module.exports = function () {

document.addEventListener('inserted', function (event) {
	if (event.animationName !== 'touchNodeInserted') return;
	var elem = event.inserted;

	var _tapStartTouch = { pageX: undefined, pageY: undefined };

	if (!window.isTouchDevice) {
		elem.addEventListener('mouseover', function (event) {
			this.classList.add('hover');
		}, false);
		elem.addEventListener('mouseout', function (event) {
			this.classList.remove('hover');
		}, false);

		return;
	}
	var handler = function (event) {
		event.preventDefault();
	};
	elem.addEventListener('mouseenter', handler, false);
	elem.addEventListener('mousemove', handler, false);
	elem.addEventListener('mouseleave', handler, false);

	elem.addEventListener('touchstart', function (event) {
		this.classList.add('hover');

		_tapStartTouch.pageX = event.changedTouches[0].pageX;
		_tapStartTouch.pageY = event.changedTouches[0].pageY;
	}, false);

	elem.addEventListener('touchend', function (event) {
		this.classList.remove('hover');

		if (!_tapStartTouch.pageX && !_tapStartTouch.pageY) return;

		var x = Math.abs(event.changedTouches[0].pageX - _tapStartTouch.pageX);
		var y = Math.abs(event.changedTouches[0].pageY - _tapStartTouch.pageY);

		if (x < TAP_BOUND_X && y < TAP_BOUND_Y) {
			var tapEvent = new Event('tap');
			tapEvent.initEvent('tap', true, true);
			elem.dispatchEvent(tapEvent);
		}

		_tapStartTouch.pageX = undefined;
		_tapStartTouch.pageY = undefined;
	}, false);

	// Touch leave event
	var touchleaveHandler = function (event) {
		var touch = event.touches[0] || event.changedTouches[0];
		if (!isInBounds(touch, elem)) {
			var leaveEvent = new Event('touchleave');
			leaveEvent.initEvent('touchleave', true, true);

			elem.dispatchEvent(leaveEvent);
			elem.removeEventListener('touchmove', touchleaveHandler, false);
		}
	};
	elem.addEventListener('touchmove', touchleaveHandler, false);
	elem.addEventListener('touchend', function (event) {
		elem.addEventListener('touchmove', touchleaveHandler, false);
	}, false);

	// Tap event
	elem.addEventListener('touchleave', function (event) {
		_tapStartTouch.pageX = undefined;
		_tapStartTouch.pageY = undefined;
	}, false);
}, false);

};
},{"node-inserted":3}],3:[function(require,module,exports){
module.exports = function (className) {

if (!className) className = 'inserted';
var css = '@keyframes ' + className + 'NodeInserted { from { clip: rect(1px, auto, auto, auto); } to { clip: rect(0px, auto, auto, to); } } @-moz-keyframes ' + className + 'NodeInserted { from { clip: rect(1px, auto, auto, auto); } to { clip: rect(0px, auto, auto, auto); } } @-webkit-keyframes ' + className + 'NodeInserted { from { clip: rect(1px, auto, auto, auto); } to { clip: rect(0px, auto, auto, auto); } } @-ms-keyframes ' + className + 'NodeInserted { from { clip: rect(1px, auto, auto, auto); } to { clip: rect(0px, auto, auto, auto); } } @-o-keyframes ' + className + 'NodeInserted { from { clip: rect(1px, auto, auto, auto); }	to { clip: rect(0px, auto, auto, auto); } } .' + className + ' {	animation-duration: 0.001s;	-o-animation-duration: 0.001s;	-ms-animation-duration: 0.001s; -moz-animation-duration: 0.001s; -webkit-animation-duration: 0.001s; animation-name: ' + className + 'NodeInserted; -o-animation-name: ' + className + 'NodeInserted; -ms-animation-name: ' + className + 'NodeInserted; -moz-animation-name: ' + className + 'NodeInserted; -webkit-animation-name: ' + className + 'NodeInserted;}';
var elem = document.createElement('style');
var text = document.createTextNode(css);
elem.appendChild(text);

if (document.head.childNodes.length)
	document.head.insertBefore(elem, document.head.childNodes[0]);
else document.head.appendChild(elem);


insertListener = function (event) {
	if (event.animationName !== className +'NodeInserted') return;
	var insertEvent = new Event('inserted');
	insertEvent.initEvent('inserted', false, true);
	insertEvent.inserted = event.target;
	insertEvent.animationName = event.animationName;

	if (event.target.parentNode) event.target.parentNode.dispatchEvent(insertEvent);
	document.dispatchEvent(insertEvent);
};

document.addEventListener("animationstart", insertListener, false);
document.addEventListener("MSAnimationStart", insertListener, false);
document.addEventListener("webkitAnimationStart", insertListener, false);

};
},{}]},{},[1])
;